
#include <iostream>
#include <fstream>
#include <map>
#include <list>
#include <queue>
#include <limits.h>

using namespace std;

class Graph
{
public:
    map<int, list<pair<int, int>>> adj;
    map<int, int> distance;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    void addEdge(int src, int dest, int wt);
    void dijkstra(int src);
};

void Graph ::addEdge(int src, int dest, int wt)
{
    adj[src].push_back(make_pair(dest, wt));
    adj[dest].push_back(make_pair(src, wt));
}

void Graph ::dijkstra(int src)
{
    for (auto i : adj)
    {
        distance[i.first] = INT_MAX;
    }

    distance[src] = 0;
    pq.push(make_pair(0, src));

    while (!pq.empty())
    {
        int node = pq.top().second;
        pq.pop();

        for (auto i : adj[node])
        {
            int v = i.first;
            int weight = i.second;
            if (distance[v] > distance[node] + weight)
            {
                distance[v] = distance[node] + weight;
                pq.push(make_pair(distance[v], v));
            }
        }
    }
}

int main()
{
    ifstream inFile("input.txt");
    if (!inFile)
    {
        cerr << "Unable to open file!!";
        return 1;
    }

    Graph g;
    int edges, src, dest, wt;
    inFile >> edges;

    for (int i = 0; i < edges; i++)
    {
        inFile >> src >> dest >> wt;
        g.addEdge(src, dest, wt);
    }

    g.dijkstra(0);

    cout << "Shortest distance from source vertex 0 \n";
    for (auto d : g.distance)
    {
        cout << " Vertex " << d.first << " " << d.second << endl;
    }

    inFile.close();

    return 0;
}