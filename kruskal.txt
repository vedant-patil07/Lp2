#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool cmp(vector<int>&a,vector<int>&b){
    return a[2]<b[2];
}
void makeSet(vector<int>&parent,vector<int>&rank,int n){
    for(int i=0;i<n;i++){
        parent[i]=i;
        rank[i]=0;
    }
}
int findParent(vector<int>&parent,int node){
    if(parent[node]==node){
        // cout<<node;
        return node;
    }
    return parent[node]=findParent(parent,parent[node]);
}

void unionSet(int u,int v,vector<int>&parent,vector<int>&rank){
    u=findParent(parent,u);
    v=findParent(parent,v);
    if(rank[u]<rank[v]){
        parent[u]=v;
    }
    else if(rank[u]>rank[v]){
        parent[v]=u;
    }
    else{
        parent[v]=u;
        rank[u]++;
    }
}
int kruskal_mst(vector<vector<int>>&edges,int n){
    sort(edges.begin() , edges.end(),cmp);
    vector<int>parent(n);
    vector<int>rank(n);
    makeSet(parent,rank,n);
    int minWeight=0;
    for(int i=0;i<edges.size();i++){
       
        int u=findParent(parent,edges[i][0]);
        int v=findParent(parent,edges[i][1]);
        int w=edges[i][2];
        
        if(u!=v){
            unionSet(u,v,parent,rank);
            minWeight+=w;
            cout << u << " -- " << v << " == " << w 
                     << endl; 
        }
    }
    return minWeight;


}
int main(){
    vector<vector<int>>edges;
    edges.push_back({7, 6, 1});
    edges.push_back({8, 2, 2});
    edges.push_back({6, 5, 2});
    edges.push_back({0, 1, 4});
    edges.push_back({2, 5, 4});
    edges.push_back({8, 6, 6});
    edges.push_back({2, 3, 7});
    edges.push_back({7, 8, 7});
    edges.push_back({0, 7, 8});
    edges.push_back({1, 2, 8});
    edges.push_back({3, 4, 9});
    edges.push_back({5, 4, 10});
    edges.push_back({1, 7, 11});
    edges.push_back({3, 5, 14});

    int n=9;
    int weight=kruskal_mst(edges,n);
    cout<<"\nMinimum Cost Spanning Tree:"<<weight;
}